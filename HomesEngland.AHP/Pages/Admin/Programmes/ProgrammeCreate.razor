@page "/admin/programmes/create"
@using HomesEngland.AHP.Data;
@inject IServiceProvider serviceProvider
@inject IGrantRepository grantRepo
@inject NavigationManager navManager

<PageHeading>Create programme</PageHeading>


<PageContentContainer>
    <PageStatusContainer PageStatus="pageState" EntityName="deployment group">
        <MainContents>

            <FormLayout OnSubmit="OnSubmit" EditContext="editContext">
                <FormInputText Id="programmeName" @bind-Value="CreateModel.ProgrammeName" Label="Programme name"></FormInputText>
                <FormInputDate Id="startDate" @bind-Value="CreateModel.Start" Label="Start date"></FormInputDate>
                <FormInputDate Id="endDate" @bind-Value="CreateModel.Finish" Label="End date"></FormInputDate>


                <CustomValidation @ref="customValidation"></CustomValidation>


                <SubmitButton Disabled="disableSubmitButton" Label="Create programme" />
            </FormLayout>

        </MainContents>

    </PageStatusContainer>
</PageContentContainer>


@code {
    private ProgrammeCreateFormModel CreateModel = new();
    private bool disableSubmitButton = false;
    private EditContext? editContext;

    private CustomValidation? customValidation;

    //private SelectListItem[]? ResourceTypes;

    private PageStatus pageState { get; set; } = PageStatus.Loading;

    [CascadingParameter]
    public MainLayout? MainLayout{ get; set; }

    protected override void OnParametersSet()
    {
        MainLayout?.SetBreadcrumbs(
                BreadcrumbItem.AdminBase()
                .AddAdminProgrammes());
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(CreateModel);
        editContext.EnableDataAnnotationsValidation(serviceProvider);

        //var tenantResponse = await appPlatform.GetTenant(TenantKey);
        //if (!tenantResponse.IsSuccessful())
        //{
        //    pageState = PageStatus.PreconditionFailed;
        //}
        //else
        //{
        //    breadcrumbs.Add(new BreadcrumbItem($"/tenants/bykey/{TenantKey}", tenantResponse.Content.TenantName));
        //    pageState = PageStatus.Visible;
        //}

        pageState = PageStatus.Visible;

    }

    public async Task OnSubmit()
    {
        pageState = PageStatus.PerformingAction;
        disableSubmitButton = true;
        if (editContext != null && editContext.Validate())
        {
            Programme programme = new()
                {
                    Finish = CreateModel.Finish.Value,
                    ProgrammeName = CreateModel.ProgrammeName,
                    Start = CreateModel.Start.Value,
                };

            Programme result = await grantRepo.CreateProgramme(programme);
            
            if (result != null)
            {
                navManager.NavigateTo($"/admin/programmes/byid/{result.ProgrammeId}?createSuccessful=true");
            }
            else
            {
                //customValidation?.DisplayErrors(result.ModelState);
                disableSubmitButton = false;
                pageState = PageStatus.Visible;
            }
        }
        else
        {
            disableSubmitButton = false;
            pageState = PageStatus.Visible;
        }
    }
}
