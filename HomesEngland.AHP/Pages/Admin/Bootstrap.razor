@page "/admin/bootstrap"
@using HomesEngland.AHP.Data;
@inject IGrantRepository grantRepo
@inject AhpContext ctx

<PageTitle>Setup reference data in P.A.N.O.S</PageTitle>

@if (ShowReferenceDataBanner)
{
    <NotificationBanner Title="Reference data" Text="Reference data has been successfully populated"></NotificationBanner>
}

<Caption CaptionSize="CaptionSize.Large">Initial system setup</Caption>
<PageHeading>Setup reference data</PageHeading>

<Paragraph>Populate core reference data such as financial years and features</Paragraph>

<GovButton OnClick="PopulateReferenceData">Populate reference data</GovButton>

@code {
    private bool ShowReferenceDataBanner { get; set; } = false;

    private async Task PopulateReferenceData()
    {
        //using (var scope = app.Services.CreateScope())
        //{
        //	var services = scope.ServiceProvider;

        //	var context = services.GetRequiredService<AhpContext>();
        ctx.Database.EnsureCreated();
        //DbInitializer.Initialize(ctx);
        //}

        var features = await grantRepo.GetFeatures();

        await EnsureFeature(features, new Feature()
        {
            FeatureName = "Provider can create properties",
            FeatureKey = "ProviderCanCreateProperties",
            Description = "Enables a provider to create properties under a scheme in the portal",
        });

        await EnsureFeature(features, new Feature()
            {
                FeatureName = "Provider can create schemes",
                FeatureKey = "ProviderCanCreateSchemes",
                Description = "A provider can create schemes under a programme in the portal",
            });

        await EnsureFeature(features, new Feature()
            {
                FeatureName = "Expense claims",
                FeatureKey = "EnableExpenseClaims",
                Description = "Expenses can be submitted by the provider in this programme for properties",
            });

        await EnsureFeature(features, new Feature()
            {
                FeatureName = "Grant milestones",
                FeatureKey = "GrantMilestones",
                Description = "Programme will have support for grant milestones within schemes",
            });

            var grantMilestoneTemplateTypes = await grantRepo.GetGrantMilestoneTemplateTypes();

        await EnsureGrantMilestoneTemplate(grantMilestoneTemplateTypes, new MilestoneType()
            {
                MilestoneTypeName = "Acquisition of land",
               Enabled = true,
            });

        await EnsureGrantMilestoneTemplate(grantMilestoneTemplateTypes, new MilestoneType()
            {
                MilestoneTypeName = "Start on site",
                Enabled = true,
            });

        await EnsureGrantMilestoneTemplate(grantMilestoneTemplateTypes, new MilestoneType()
            {
                MilestoneTypeName = "Practical completion",
                Enabled = true,
            });
            
        await EnsureGrantMilestoneTemplate(grantMilestoneTemplateTypes, new MilestoneType()
            {
                MilestoneTypeName = "Exchange of contract",
                Enabled = true,
            });

        ShowReferenceDataBanner = true;
    }

    private async Task EnsureFeature(IEnumerable<Feature> features, Feature feature)
    {
        if (features.Any(f => f.FeatureKey == feature.FeatureKey))
        {
            return;
        }

        await grantRepo.CreateFeature(feature);
    }
    
    private async Task EnsureGrantMilestoneTemplate(IEnumerable<MilestoneType> features, MilestoneType milestoneType)
    {
        if (features.Any(f => string.Equals(f.MilestoneTypeName == milestoneType.MilestoneTypeName, StringComparison.InvariantCultureIgnoreCase)))
        {
            return;
        }

        await grantRepo.CreateMilestoneType(milestoneType);
    }

    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }

    protected override void OnParametersSet()
    {
        MainLayout?.SetBreadcrumbs(
                BreadcrumbItem.AdminBase());
    }
}
