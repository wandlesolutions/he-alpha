@page "/providers/byid/{ProviderId:guid}/properties/byid/{PropertyId:guid}"
@using HomesEngland.AHP.Data;
@inject IGrantRepository repo

<PageTitle>@PageTitle</PageTitle>

@if (Property != null)
{
    <Caption CaptionSize="CaptionSize.Large">@Property.PropertyName</Caption>
}
<PageHeadingActionLinkContainer Heading="Property Details">
    <ActionLinks>
        <ActionLink Href="@($"/providers/byid/{ProviderId}/properties/create")">Claim expense</ActionLink>
    </ActionLinks>
</PageHeadingActionLinkContainer>

@if (Property != null)
{
    <DataList>
        <DataRow>
            <DataTerm>Address</DataTerm>
            <DataDefinition>
                @Property.Address1
                <br />
                @Property.Address2
                <br />
                @Property.Postcode
                <br />
                @Property.LocalAuthority</DataDefinition>
        </DataRow>


        <DataRow>
            <DataTerm>Grant amount:</DataTerm>
            <DataDefinition>
                @if (Property.GrantAmount.HasValue)
                {
                    <Currency Amount="@Property.GrantAmount"></Currency>
                }
                else
                {
                    <span class="govuk-hint">None assigned</span>
                }
            </DataDefinition>
        </DataRow>

        <DataRow>
            <DataTerm>Expenses amount:</DataTerm>
            <DataDefinition>

                @if (Property.ExpensesAmount.HasValue)
                {
                    <Currency Amount="@Property.ExpensesAmount"></Currency>
                }
                else
                {
                    <span class="govuk-hint">None assigned</span>
                }
            </DataDefinition>
        </DataRow>

        <DataRow>
            <DataTerm>Total funding:</DataTerm>
            <DataDefinition>

                @if (Property.TotalAmount.HasValue)
                {
                    <Currency Amount="@Property.TotalAmount"></Currency>
                }
                else
                {
                    <span class="govuk-hint">None assigned</span>
                }
            </DataDefinition>
        </DataRow>
    </DataList>

    

    <Heading Size="HeadingSize.Medium">Grant milestones</Heading>
    if(GrantMilestones != null && GrantMilestones.Any())
    {
        <GovTable Items="GrantMilestones" Context="milestone">
            <Header>
                <GovTableHeader>Milestone type</GovTableHeader>
                <GovTableHeader>Funding</GovTableHeader>
                <GovTableHeader>Date</GovTableHeader>
                <GovTableHeader>Actions</GovTableHeader>
            </Header>
            <RowTemplate>
                <GovTableRowHeader>
                    @milestone.MilestoneType.MilestoneTypeName
                </GovTableRowHeader>
                <GovTableData><Currency Amount="@milestone.GrantAmount"></Currency></GovTableData>
                <GovTableData><LiteralDate Value="@milestone.TargetDate"></LiteralDate></GovTableData>
                <GovTableData><GovLink Href="@($"/providers/byid/{ProviderId}/properties/byid/{PropertyId}/grantMilestones/byid/{milestone.GrantMilestoneId}")">Update</GovLink></GovTableData>
            </RowTemplate>
        </GovTable>
    }
    else{
        <Inset>No grant milestones have been created against this property</Inset>
    }

    <Heading Size="HeadingSize.Medium">Expenses</Heading>
    <Inset>No expenses have been claimed against this property</Inset>
}
else
{
    <Inset>Property does not exist for this provider</Inset>
}

@code {

    private Provider? Provider { get; set; }

    private IEnumerable<GrantMilestone>? GrantMilestones { get; set; }

    [Parameter]
    public Guid ProviderId { get; set; }

    [Parameter]
    public Guid PropertyId { get; set; }

    private Property? Property { get; set; }

    public string PageTitle { get; set; } = "Property details";

    protected override async Task OnInitializedAsync()
    {
        Provider = await repo.GetProvider(ProviderId);
        Property = await repo.GetPropertyForProvider(PropertyId, ProviderId);

        if (Provider != null && Property != null)
        {
            if (Property.Scheme.ProviderId != ProviderId)
            {
                throw new InvalidOperationException("Provider and property doesn't match");

            }

            GrantMilestones = await repo.GetGrantMilestones(PropertyId);
            PageTitle = $"{Property.PropertyName} - Property details";
        } 
    }

    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }

    protected override void OnParametersSet()
    {
        MainLayout?.SetBreadcrumbs(
                   BreadcrumbItem.ProviderBase()
                   .AddProvider(Provider)
                   .AddProperties(Provider));
    }
}
