@page "/providers/byid/{ProviderId:guid}/schemes/byid/{SchemeId:guid}"
@using HomesEngland.AHP.Data;
@inject IGrantRepository repo

<PageTitle>@PageTitle</PageTitle>

@if (Scheme != null)
{
    <Caption CaptionSize="CaptionSize.Large">@Scheme.SchemeName</Caption>
}

@if (Scheme != null
    && RevenueFundingEnabled
    && Scheme.TotalRevenueFundingAmount.HasValue
    && Scheme.TotalRevenueFundingAmount > 0)
{
    <PageHeadingActionLinkContainer Heading="Scheme Details">
        <ActionLinks>
            <ActionLink Href="@($"/providers/byid/{ProviderId}/schemes/byid/{SchemeId}/revenueFunding/create")">Claim revenue funding</ActionLink>
        </ActionLinks>
    </PageHeadingActionLinkContainer>
}
else
{
    <PageHeading>Scheme details</PageHeading>
}

@if (Scheme != null)
{
    <div style="margin-bottom: 30px">
        @if (Scheme.StatusName == "Active")
        {
            <Tag>Approved</Tag>
        }
        else
        {
            <Tag Color="TagColor.Grey">@Scheme.StatusName</Tag>
        }
    </div>

    <DataList>
        <DataRow>
            <DataTerm>Programme:</DataTerm>
            <DataDefinition>@Scheme.Programme.ProgrammeName</DataDefinition>
        </DataRow>
        <DataRow>
            <DataTerm>Local Authority:</DataTerm>
            <DataDefinition>
                @if (Scheme.LocalAuthority != null && !string.IsNullOrWhiteSpace(Scheme.LocalAuthority.LocalAuthorityName))
                {
                    @Scheme.LocalAuthority.LocalAuthorityName
                }
                else
                {
                    <text>Not set</text>
                }
            </DataDefinition>
        </DataRow>

        <DataRow>
            <DataTerm>Grant amount:</DataTerm>
            <DataDefinition>
                @if (Scheme.TotalGrantAmount.HasValue)
                {
                    <Currency Amount="@Scheme.TotalGrantAmount"></Currency>
                }
                else
                {
                    <span class="govuk-hint">None assigned</span>
                }
            </DataDefinition>
        </DataRow>
        @if (RevenueFundingEnabled)
        {
            <DataRow>
                <DataTerm>Revenue funding amount:</DataTerm>
                <DataDefinition>

                    @if (Scheme.TotalRevenueFundingAmount.HasValue)
                    {
                        <Currency Amount="@Scheme.TotalRevenueFundingAmount"></Currency>
                    }
                    else
                    {
                        <span class="govuk-hint">None assigned</span>
                    }
                </DataDefinition>
            </DataRow>
        }
        <DataRow>
            <DataTerm>Total funding:</DataTerm>
            <DataDefinition>

                @if (Scheme.TotalAmount.HasValue)
                {
                    <Currency Amount="@Scheme.TotalAmount"></Currency>
                }
                else
                {
                    <span class="govuk-hint">None assigned</span>
                }
            </DataDefinition>
        </DataRow>
    </DataList>



    <Heading Size="HeadingSize.Medium">Grant milestones</Heading>
    if (GrantMilestones != null && GrantMilestones.Any())
    {
        <GovTable Items="GrantMilestones" Context="milestone">
            <Header>
                <GovTableHeader>Milestone type</GovTableHeader>
                <GovTableHeader>Funding</GovTableHeader>
                <GovTableHeader>Date</GovTableHeader>
                <GovTableHeader>Actions</GovTableHeader>
            </Header>
            <RowTemplate>
                <GovTableRowHeader>
                    @milestone.MilestoneType.MilestoneTypeName
                </GovTableRowHeader>
                <GovTableData><Currency Amount="@milestone.MilestoneGrantAmount"></Currency></GovTableData>
                <GovTableData><LiteralDate Value="@milestone.TargetDate"></LiteralDate></GovTableData>
                <GovTableData>
                    @if (milestone.Completed)
                    {
                        <Tag>Completed</Tag>
                    }
                    else
                    {
                        bool isSplitPending = GrantMilestoneSplitRequests != null 
                        && GrantMilestoneSplitRequests.Any(_ => _.GrantMilestoneId == milestone.GrantMilestoneId
                        && _.StatusName == "Pending Approval");
                        if (isSplitPending)
                        {
                            <Tag Color="TagColor.Orange">Split pending approval</Tag>
                        }
                        else
                        {
                            <GovLink Href="@($"/providers/byid/{ProviderId}/schemes/byid/{SchemeId}/grantMilestones/byid/{milestone.GrantMilestoneId}/update")">Update</GovLink>
                        }
                    }
                </GovTableData>
            </RowTemplate>
        </GovTable>
    }
    else
    {
        <Inset>No grant milestones have been created against this scheme</Inset>
    }

    @if (RevenueFundingEnabled)
    {
        <Heading Size="HeadingSize.Medium">Revenue funding</Heading>
        if (Scheme.TotalRevenueFundingAmount == 0)
        {
            <Inset>This scheme has no revenue funding assigned.</Inset>
        }
        else if( RevenueClaims == null || !RevenueClaims.Any())
        {
            <Inset>No revenue funding claims have been assigned to this scheme, <a Href="@($"/providers/byid/{ProviderId}/schemes/byid/{SchemeId}/revenueFunding/create")">submit a new claim</a>.</Inset>

        }
        else
        {
            <GovTable Items="RevenueClaims" Context="claim">
                <Header>
                    <GovTableHeader>Payment date</GovTableHeader>
                    <GovTableHeader>Amount</GovTableHeader>
                    <GovTableHeader>Status</GovTableHeader>
                </Header>
                <RowTemplate>
                    <GovTableData><LiteralDate Value="@claim.PaymentDate"></LiteralDate></GovTableData>

                    <GovTableData><Currency Amount="@claim.ClaimAmount"></Currency></GovTableData>
                    <GovTableData>
                        @if (claim.Appproved)
                        {
                            <Tag Color="TagColor.Green">Approved</Tag>
                        }
                        else
                        {
                            <Tag Color="TagColor.Grey">Pending approval</Tag>

                        }
                        </GovTableData>

                </RowTemplate>
            </GovTable>
        }
    }
}
else
{
    <Inset>Scheme does not exist for this provider</Inset>
}

@code {

    private Provider? Provider { get; set; }

    private IEnumerable<GrantMilestone>? GrantMilestones { get; set; }
    private IEnumerable<GrantMilestoneSplitRequestStatus>? GrantMilestoneSplitRequests { get; set; }
    public IEnumerable<SchemeRevenueClaim>? RevenueClaims { get; set; }

    [Parameter]
    public Guid ProviderId { get; set; }

    [Parameter]
    public Guid SchemeId { get; set; }

    private Scheme? Scheme { get; set; }

    public string PageTitle { get; set; } = "Scheme details";

    public bool RevenueFundingEnabled { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Scheme = await repo.GetScheme(SchemeId);
        Provider = await repo.GetProvider(ProviderId);

        if (Provider != null && Scheme != null)
        {
            GrantMilestones = await repo.GetGrantMilestones(SchemeId);
            GrantMilestoneSplitRequests = await repo.GetGrantMilestoneSplitStatus(SchemeId);

            IEnumerable<string> programmeFeatures = await repo.GetFeatureKeysForProgramme(Scheme.ProgrammeId);
            if (programmeFeatures != null && programmeFeatures.Any())
            {
                RevenueFundingEnabled = programmeFeatures.Any(_ => _ == FeatureKeys.EnableRevenueFunding);
                if (RevenueFundingEnabled)
                {
                    RevenueClaims = await repo.GetSchemeRevenueClaims(SchemeId);
                }
            }

            PageTitle = $"{Scheme.SchemeName} - Scheme details";
        }
    }

    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }

    protected override void OnParametersSet()
    {
        MainLayout?.SetBreadcrumbs(
                   BreadcrumbItem.ProviderBase()
                   .AddProvider(Provider)
                   .AddSchemes(Provider));
    }
}
