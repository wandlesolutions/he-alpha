@page "/providers/byid/{ProviderId:guid}/schemes/create"
@using HomesEngland.AHP.Data;
@using HomesEngland.AHP.Operations.Properties;
@inject IServiceProvider serviceProvider
@inject IGrantRepository grantRepo
@inject NavigationManager navManager
@inject MilestoneCreationService milestoneCreationService

<PageTitle>Create scheme</PageTitle>
@if (Provider != null)
{
    <Caption CaptionSize="CaptionSize.Large">@Provider.ProviderName</Caption>
}
<PageHeading>Create scheme</PageHeading>


<PageContentContainer>
    <PageStatusContainer PageStatus="pageState" EntityName="scheme">
        <MainContents>

            @if (Programmes != null && Programmes.Length > 0)
            {
                <FormLayout OnSubmit="OnSubmit" EditContext="editContext">
                    <FormInputText Id="schemeName" @bind-Value="CreateModel.SchemeName" Label="Scheme name" Width="TextboxWidth.OneHalf"></FormInputText>
                    <FormSelect Id="programmeId" @bind-Value="CreateModel.ProgrammeId" Label="Programme" Items="Programmes" NoItemsText="There are no programmes enabled to your to create new schemes in"></FormSelect>
                    <FormInputMoney Id="grantAmount" @bind-Value="CreateModel.GrantAmount" Label="Grant amount"></FormInputMoney>
                    <FormInputMoney Id="expensesAmount" @bind-Value="CreateModel.ExpensesAmount" Label="Expenses amount"></FormInputMoney>
                    
                    <CustomValidation @ref="customValidation"></CustomValidation>

                    <SubmitButton Disabled="disableSubmitButton" Label="Create scheme" />
                </FormLayout>
            }
            else
            {
                <Inset>There are no available programmes to create schemes in.</Inset>
            }

        </MainContents>

    </PageStatusContainer>
</PageContentContainer>


@code {
    private SchemeCreateFormModel CreateModel = new();
    private bool disableSubmitButton = false;
    private EditContext? editContext;

    private CustomValidation? customValidation;

    private SelectListItem[]? Programmes { get; set; }

    private PageStatus pageState { get; set; } = PageStatus.Loading;



    protected override async Task OnInitializedAsync()
    {
        editContext = new(CreateModel);
        editContext.EnableDataAnnotationsValidation(serviceProvider);

        Provider = await grantRepo.GetProvider(ProviderId);
        Programmes = (await grantRepo.GetProgrammesWithProviderSchemeCreationEnabled())
        .Select(p => new SelectListItem(p.ProgrammeName, p.ProgrammeId.ToString()))
                .ToArray();

        pageState = PageStatus.Visible;
    }


    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }

    private Provider? Provider { get; set; }

    [Parameter]
    public Guid ProviderId { get; set; }



    protected override void OnParametersSet()
    {
        MainLayout?.SetBreadcrumbs(
                        BreadcrumbItem.ProviderBase()
                        .AddProvider(Provider)
                        .AddSchemes(Provider));
    }

    public async Task OnSubmit()
    {
        pageState = PageStatus.PerformingAction;
        disableSubmitButton = true;
        if (editContext != null && editContext.Validate())
        {
            decimal totalAmount = CreateModel.GrantAmount.Value + CreateModel.ExpensesAmount.Value;
            Scheme scheme = new()
                {
                    SchemeName = CreateModel.SchemeName,
                    Complete = false,
                    Completed = null,
                    ProgrammeId = new Guid(CreateModel.ProgrammeId),
                    ProviderId = Provider.ProviderId,
                    TotalGrant = CreateModel.GrantAmount,
                    TotalExpensesAmount = CreateModel.ExpensesAmount,
                    TotalAmount = totalAmount,
                };

            Scheme result = await grantRepo.CreateScheme(scheme);

            if (result != null)
            {
                await milestoneCreationService.CreateMilestoneAfterSchemeIsCreated(result.SchemeId);
                
                navManager.NavigateTo($"/providers/byid/{result.ProviderId}/schemes?createSuccessful=true");
            }
            else
            {
                //customValidation?.DisplayErrors(result.ModelState);
                disableSubmitButton = false;
                pageState = PageStatus.Visible;
            }
        }
        else
        {
            disableSubmitButton = false;
            pageState = PageStatus.Visible;
        }
    }
}
