@page "/providers/byid/{ProviderId:guid}/schemes/byid/{SchemeId:guid}/grantMilestones/byid/{GrantMilestoneId:guid}/update"
@using HomesEngland.AHP.Data;
@using HomesEngland.AHP.Operations.Properties;
@inject IServiceProvider serviceProvider
@inject IGrantRepository grantRepo
@inject NavigationManager navManager
@inject ISplitMilestoneService splitMilestoneService

<PageTitle>Update grant milestone</PageTitle>

@if (GrantMilestone != null && Scheme != null)
{
    <Caption CaptionSize="CaptionSize.Large">@GrantMilestone.MilestoneType.MilestoneTypeName for @Scheme.SchemeName</Caption>
}
<PageHeading>Update grant milestone</PageHeading>


<PageContentContainer>
    <PageStatusContainer PageStatus="pageState" EntityName="grant milestone">
        <MainContents>

            @if (GrantMilestone != null)
            {
                @if (GrantMilestone.Completed)
                {
                    <Inset>Grant milestone has been completed and can not be updated.</Inset>
                }
                else
                {
                    if (CompletionScreen == null)
                    {
                        <GovRadioDecision @bind-Value="CompletionDecision" Name="Completion" Title="How would you like to update this milestone?">
                            <GovRadioDecisionItem Id="update" Value="update" Label="Update forecast date" Name="Completion" Hint="Change when you think you will meet this milestone or indicate you won't meet it on the expected date."></GovRadioDecisionItem>
                            <GovRadioDecisionItem Id="split" Value="split" Label="Split this milestone payment" Name="Completion" Hint="Create multiple milestones from the funding amount within this milestone."></GovRadioDecisionItem>
                            <GovRadioDecisionItem Id="complete" Value="complete" Label="Complete this milestone" Name="Completion" Hint="Mark the milestone as complete and receive any associated payment."></GovRadioDecisionItem>
                        </GovRadioDecision>

                        <GovButton OnClick="OnDecision">Continue</GovButton>
                    }

                    @if (CompletionScreen == "update")
                    {
                        <FormLayout OnSubmit="OnSubmit" EditContext="editContext">

                            <FormInputDate Id="targetDate" @bind-Value="CreateModel.TargetDate" Label="Target date"></FormInputDate>

                            <CustomValidation @ref="customValidation"></CustomValidation>

                            <SubmitButton Disabled="disableSubmitButton" Label="Update milestone" />
                        </FormLayout>

                    }

                    @if (CompletionScreen == "complete")
                    {
                        <Paragraph>
                            You are about to mark this milestone as complete. This will trigger a payment after the milestone date.
                        </Paragraph>

                        <DataList>
                            <DataRow>
                                <DataTerm>Programme:</DataTerm>
                                <DataDefinition>@Scheme.Programme.ProgrammeName</DataDefinition>
                            </DataRow>

                            <DataRow>
                                <DataTerm>Grant amount:</DataTerm>
                                <DataDefinition>
                                    <Currency Amount="@GrantMilestone.MilestoneGrantAmount"></Currency>
                                </DataDefinition>
                            </DataRow>
                            <DataRow>
                                <DataTerm>Milestone completion date:</DataTerm>
                                <DataDefinition>
                                    <LiteralDate Value="GrantMilestone.TargetDate"></LiteralDate>
                                </DataDefinition>
                            </DataRow>
                        </DataList>

                        <GovButton OnClick="OnCompleteMilestone">Complete milestone</GovButton>

                    }

                    @if (CompletionScreen == "split")
                    {
                        <Paragraph>
                            You are about to split this milestone into two seperate milestone. This will create an additional milestone with the specified amount and target date. This milestone will be updated with the remaining amount.
                        </Paragraph>

                        <DataList>
                            <DataRow>
                                <DataTerm>Programme:</DataTerm>
                                <DataDefinition>@Scheme.Programme.ProgrammeName</DataDefinition>
                            </DataRow>
                            <DataRow>
                                <DataTerm>Scheme:</DataTerm>
                                <DataDefinition>@Scheme.SchemeName</DataDefinition>
                            </DataRow>
                            <DataRow>
                                <DataTerm>Existng grant amount:</DataTerm>
                                <DataDefinition>
                                    <Currency Amount="@GrantMilestone.MilestoneGrantAmount"></Currency>
                                </DataDefinition>
                            </DataRow>
                            <DataRow>
                                <DataTerm>Existing milestone completion date:</DataTerm>
                                <DataDefinition>
                                    <LiteralDate Value="GrantMilestone.TargetDate"></LiteralDate>
                                </DataDefinition>
                            </DataRow>
                        </DataList>

                        <FormLayout OnSubmit="OnSplit" EditContext="splitEditContext">
                            <FormInputMoney Id="createdMilestoneAmount" @bind-Value="SplitMilestoneRequest.CreatedMilestoneAmount" DisplayName="New milestone amount" Label="New milestone amount"></FormInputMoney>
                            <FormInputDate Id="createdMilestoneDate" @bind-Value="SplitMilestoneRequest.CreatedMilestoneDate" Label="New milestone target date"></FormInputDate>

                            <CustomValidation @ref="customValidation"></CustomValidation>

                            <SubmitButton Disabled="disableSubmitButton" Label="Update milestone" />
                        </FormLayout>
                    }

                    @if(CompletionScreen == "schemeNotApproved")
                    {
                        <Warning>This scheme is not approved, so completing milestones is not available until approval has been granted.</Warning>
                    }
                }
            }
            else
            {
                <Inset>Grant milestone does not exist</Inset>
            }

        </MainContents>

    </PageStatusContainer>
</PageContentContainer>


@code {
    private GrantMilestoneUpdateFormModel CreateModel = new();
    private bool disableSubmitButton = false;
    private EditContext? editContext;

    private SplitMilestoneFormModel SplitMilestoneRequest = new();
    private EditContext? splitEditContext;

    private CustomValidation? customValidation;

    private GrantMilestone? GrantMilestone { get; set; }
    private Scheme? Scheme { get; set; }


    private PageStatus pageState { get; set; } = PageStatus.Loading;

    private string? CompletionDecision { get; set; }

    private string? CompletionScreen { get; set; }


    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }

    private Provider? Provider { get; set; }

    [Parameter]
    public Guid ProviderId { get; set; }

    [Parameter]
    public Guid SchemeId { get; set; }

    [Parameter]
    public Guid GrantMilestoneId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(CreateModel);
        editContext.EnableDataAnnotationsValidation(serviceProvider);

        splitEditContext = new(SplitMilestoneRequest);
        splitEditContext.EnableDataAnnotationsValidation(serviceProvider);

        Provider = await grantRepo.GetProvider(ProviderId);
        Scheme = await grantRepo.GetScheme(SchemeId);
        GrantMilestone = await grantRepo.GetGrantMilestone(GrantMilestoneId);

        if (GrantMilestone == null
        || Provider == null
        || Scheme == null)
        {
            pageState = PageStatus.PreconditionFailed;
        }
        else
        {
            CreateModel.TargetDate = GrantMilestone.TargetDate;

            pageState = PageStatus.Visible;
        }
    }



    protected override void OnParametersSet()
    {
        MainLayout?.SetBreadcrumbs(
                    BreadcrumbItem.ProviderBase()
                    .AddProvider(Provider)
                    .AddSchemes(Provider)
                    .AddScheme(Provider, Scheme)
                    );
    }

    public async Task OnSubmit()
    {
        pageState = PageStatus.PerformingAction;
        disableSubmitButton = true;

        if (CreateModel.TargetDate.HasValue
        && CreateModel.TargetDate.Value < DateTime.Now)
        {
            // Add validation message if targetdate is today or earlier
            customValidation?.ClearErrors();
            customValidation?.AddErrorMessage(nameof(CreateModel.TargetDate), "Date must be set to tomorrow or in the future");
        }

        if (editContext != null && editContext.Validate())
        {
            try
            {
                await grantRepo.UpdateGrantMilestoneDate(GrantMilestoneId, CreateModel.TargetDate.Value);
                navManager.NavigateTo($"/providers/byid/{ProviderId}/schemes/byid/{SchemeId}");

            }
            catch (Exception)
            {
                //customValidation?.DisplayErrors(result.ModelState);
                disableSubmitButton = false;
                pageState = PageStatus.Visible;
            }

        }
        else
        {
            disableSubmitButton = false;
            pageState = PageStatus.Visible;
        }
    }

    public async Task OnSplit()
    {
        pageState = PageStatus.PerformingAction;
        disableSubmitButton = true;

        if (editContext != null && editContext.Validate())
        {
            try
            {
                await splitMilestoneService.SplitMilestone(new SplitMilestoneRequest()
                {
                        CreatedMilestoneAmount = SplitMilestoneRequest.CreatedMilestoneAmount.Value,
                        CreatedMilestoneDate = SplitMilestoneRequest.CreatedMilestoneDate.Value,
                        ExistingMilestoneId = GrantMilestoneId,
                });
                
                navManager.NavigateTo($"/providers/byid/{ProviderId}/schemes/byid/{SchemeId}");

            }
            catch (Exception)
            {
                //customValidation?.DisplayErrors(result.ModelState);
                disableSubmitButton = false;
                pageState = PageStatus.Visible;
            }

        }
        else
        {
            disableSubmitButton = false;
            pageState = PageStatus.Visible;
        }
    }

    public void OnDecision()
    {
        if(CompletionDecision == "complete")
        {
            if(Scheme.StatusCode != 1)
            {
                CompletionScreen = "schemeNotApproved";
                return;
            }
        }
        CompletionScreen = CompletionDecision;
    }

    public async Task OnCompleteMilestone()
    {
        pageState = PageStatus.PerformingAction;
        var milestone = await grantRepo.GetGrantMilestone(GrantMilestoneId);

        if (milestone == null)
        {
            pageState = PageStatus.PreconditionFailed;
            return;
        }

        if (milestone.Completed || milestone.CompletionDate.HasValue)
        {
            pageState = PageStatus.PreconditionFailed;
            return;
        }

        await grantRepo.CompleteGrantMilestone(milestone.GrantMilestoneId, milestone.TargetDate);

        navManager.NavigateTo($"/providers/byid/{ProviderId}/schemes/byid/{SchemeId}");
    }

}

